name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Clonar el repositorio
        uses: actions/checkout@v3

      - name: Configurar JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'adopt'
          java-version: '21'

      - name: Ejecutar pruebas
        run: sudo chmod 777 test.sh && ./test.sh

      - name: Construir la imagen Docker
        run: docker build -t gilgamesh06/task:${{ github.run_number }} .

      - name: Login en Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Etiquetar como latest
        run: docker tag gilgamesh06/task:${{ github.run_number }} gilgamesh06/task:latest

      - name: Push de imágenes
        run: |
          docker push gilgamesh06/task:${{ github.run_number }}
          docker push gilgamesh06/task:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push

    steps: 

      - name: Login en Docker Hub (para pull de imagen)
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          
      - name: Deploy to EC2
        env:
          PRIVATE_KEY: ${{ secrets.EC2_PRIVATE_KEY }}
          HOST: ${{ secrets.EC2_HOST }}
          USER: ${{ secrets.EC2_USER }}
        run: |
          echo "$PRIVATE_KEY" > github-ec2.pem
          chmod 600 github-ec2.pem
          ssh -o StrictHostKeyChecking=no -i github-ec2.pem ${USER}@${HOST} << 'EOF'
            echo "Current directory: $(pwd)"
            echo "Listing home directory:"
            ls -la ~
            rm -rf task
            mkdir task && cd task
            git init
            git remote add origin https://github.com/Gilgamesh06/TaskApp.git
            git config core.sparseCheckout true
            echo "docker-compose.yml" > .git/info/sparse-checkout
            git pull origin main
            sudo apt update
            sudo DEBIAN_FRONTEND=noninteractive apt install -y openjdk-21-jdk docker.io docker-compose-v2
            sudo chmod 777 /var/run/docker.sock
            docker compose down --volumes --remove-orphans || true
            docker pull gilgamesh06/task:latest
            docker compose up -d
          EOF

      - name: Invocar Lambda de notificación SNS
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          aws lambda invoke \
            --function-name notification-uis \
            --region $AWS_REGION \
            --payload '{}' \
            --cli-binary-format raw-in-base64-out \
            /dev/null
